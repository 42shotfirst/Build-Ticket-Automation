@echo off
REM Excel to Terraform Automation Runner for Windows
REM Designed for Control-M and other external schedulers
REM Usage: run_automation.bat [config_file] [excel_file] [output_dir]

setlocal enabledelayedexpansion

REM Configuration
set "CONFIG_FILE=%~1"
if "%CONFIG_FILE%"=="" set "CONFIG_FILE=automation_config.json"

set "EXCEL_FILE=%~2"
if "%EXCEL_FILE%"=="" set "EXCEL_FILE=LLDtest.xlsm"

set "OUTPUT_DIR=%~3"
if "%OUTPUT_DIR%"=="" set "OUTPUT_DIR=terraform_output"

set "LOG_FILE=automation_%date:~-4,4%%date:~-10,2%%date:~-7,2%_%time:~0,2%%time:~3,2%%time:~6,2%.log"
set "LOG_FILE=%LOG_FILE: =0%"

set "PYTHON_CMD=python"

REM Function to log with timestamp
:log
echo %date% %time% - %~1 | tee -a "%LOG_FILE%"
goto :eof

REM Function to log errors
:log_error
echo %date% %time% - ERROR: %~1 | tee -a "%LOG_FILE%"
goto :eof

REM Function to log success
:log_success
echo %date% %time% - SUCCESS: %~1 | tee -a "%LOG_FILE%"
goto :eof

REM Function to log warnings
:log_warning
echo %date% %time% - WARNING: %~1 | tee -a "%LOG_FILE%"
goto :eof

REM Function to log info
:log_info
echo %date% %time% - INFO: %~1 | tee -a "%LOG_FILE%"
goto :eof

REM Main execution
call :log_info "=========================================="
call :log_info "Excel to Terraform Automation Pipeline"
call :log_info "=========================================="
call :log_info "Config File: %CONFIG_FILE%"
call :log_info "Excel File: %EXCEL_FILE%"
call :log_info "Output Directory: %OUTPUT_DIR%"
call :log_info "Log File: %LOG_FILE%"
call :log_info "Python Command: %PYTHON_CMD%"
call :log_info "=========================================="

REM Check if Python is available
%PYTHON_CMD% --version >nul 2>&1
if errorlevel 1 (
    call :log_error "Python not found. Please install Python 3.7 or higher."
    exit /b 1
)

REM Get Python version
for /f "tokens=2" %%i in ('%PYTHON_CMD% --version 2^>^&1') do set "PYTHON_VERSION=%%i"
call :log_info "Python Version: %PYTHON_VERSION%"

REM Check if required packages are installed
call :log_info "Checking required Python packages..."
%PYTHON_CMD% -c "import pandas, openpyxl" >nul 2>&1
if errorlevel 1 (
    call :log_error "Required Python packages not found. Installing..."
    %PYTHON_CMD% -m pip install pandas openpyxl
    if errorlevel 1 (
        call :log_error "Failed to install required packages"
        exit /b 1
    )
    call :log_success "Required packages installed successfully"
) else (
    call :log_success "Required packages are available"
)

REM Check if Excel file exists
if not exist "%EXCEL_FILE%" (
    call :log_error "Excel file not found: %EXCEL_FILE%"
    exit /b 1
)

REM Check if config file exists
if not exist "%CONFIG_FILE%" (
    call :log_warning "Config file not found: %CONFIG_FILE%. Using defaults."
    set "CONFIG_FILE="
)

REM Create output directory
if not exist "%OUTPUT_DIR%" mkdir "%OUTPUT_DIR%"
call :log_info "Output directory created: %OUTPUT_DIR%"

REM Run the automation pipeline
call :log_info "Starting automation pipeline..."

REM Build command
set "CMD=%PYTHON_CMD% automation_pipeline.py"
if not "%CONFIG_FILE%"=="" set "CMD=%CMD% --config %CONFIG_FILE%"
set "CMD=%CMD% --excel-file %EXCEL_FILE% --output-dir %OUTPUT_DIR%"

call :log_info "Executing: %CMD%"

REM Execute the command
%CMD% 2>&1 | tee -a "%LOG_FILE%"
if errorlevel 1 (
    call :log_error "Automation pipeline failed"
    exit /b 2
)

call :log_success "Automation pipeline completed successfully"

REM Check if output files were created
if exist "%OUTPUT_DIR%" (
    call :log_info "Checking generated files..."
    set "FILE_COUNT=0"
    for %%f in ("%OUTPUT_DIR%\*.tf" "%OUTPUT_DIR%\*.tfvars") do (
        set /a FILE_COUNT+=1
        call :log_info "  - %%~nxf"
    )
    
    if %FILE_COUNT% gtr 0 (
        call :log_success "Generated %FILE_COUNT% Terraform files in %OUTPUT_DIR%"
        
        REM Create deployment script
        call :create_deployment_script
    ) else (
        call :log_warning "No Terraform files found in output directory"
    )
)

call :log_success "Automation completed successfully"
exit /b 0

REM Function to create deployment script
:create_deployment_script
call :log_info "Creating deployment script..."

set "DEPLOY_SCRIPT=%OUTPUT_DIR%\deploy.bat"

(
echo @echo off
echo REM Terraform Deployment Script for Windows
echo REM Generated by Excel to Terraform Automation Pipeline
echo.
echo setlocal
echo.
echo echo ==========================================
echo echo Terraform Infrastructure Deployment
echo echo ==========================================
echo.
echo REM Check if terraform is installed
echo terraform --version ^>nul 2^>^&1
echo if errorlevel 1 ^(
echo     echo ERROR: Terraform not found. Please install Terraform.
echo     exit /b 1
echo ^)
echo.
echo echo Terraform version: 
echo terraform --version
echo.
echo REM Initialize Terraform
echo echo Initializing Terraform...
echo terraform init
echo.
echo REM Validate configuration
echo echo Validating Terraform configuration...
echo terraform validate
echo.
echo REM Plan deployment
echo echo Creating deployment plan...
echo terraform plan -out=tfplan
echo.
echo echo Deployment plan created. Review the plan above.
echo echo.
echo echo To deploy the infrastructure, run:
echo echo   terraform apply tfplan
echo echo.
echo echo To destroy the infrastructure, run:
echo echo   terraform destroy
echo echo.
echo.
echo REM Ask for confirmation
echo set /p "CONFIRM=Do you want to proceed with deployment? (y/N): "
echo if /i "!CONFIRM!"=="y" ^(
echo     echo Deploying infrastructure...
echo     terraform apply tfplan
echo     echo Deployment completed successfully!
echo ^) else ^(
echo     echo Deployment cancelled.
echo ^)
) > "%DEPLOY_SCRIPT%"

call :log_success "Deployment script created: %DEPLOY_SCRIPT%"
goto :eof
